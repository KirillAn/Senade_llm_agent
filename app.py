# app.py

import gradio as gr
import logging

from agents.ctf_agent import initialize_agent
from utils.final_answer_parser import FinalAnswerParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É RetrievalQA –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
rag_chain = initialize_agent()

def ask_agent(question: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ü–µ–ø–æ—á–∫–∏ RetrievalQA.
    """
    try:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {question}")
        raw_answer = rag_chain.run(question)
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (raw): {raw_answer}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        parser = FinalAnswerParser()
        final_answer = parser.parse(raw_answer)
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (parsed): {final_answer}")

        return final_answer
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ ask_agent: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

def respond(message, history):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.
    """
    history = history or []
    history.append((message, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞..."))
    answer = ask_agent(message)
    history[-1] = (message, answer)
    return history, history

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio
with gr.Blocks() as demo:
    gr.Markdown("# Chat with a CTF Assistant ü¶ú‚õìÔ∏è")

    chatbot = gr.Chatbot(label="CTF Assistant")

    with gr.Row():
        input_box = gr.Textbox(
            lines=1,
            label="Chat Message",
            placeholder="Type your message here and press Enter..."
        )

    state = gr.State([])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞

    input_box.submit(respond, [input_box, state], [chatbot, state])
    input_box.submit(lambda: "", None, input_box)  # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π Gradio
if __name__ == "__main__":
    demo.queue()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏
    demo.launch(share=True)
